
4	对象命名规范
4.1	总则
【规则】特殊约定或缩写，要有注释说明
【规则】采用英文单词、英文短语作为名称
【规则】库、表、字段命名的字符范围为：a-z, 0-9 和_(下划线)
【规则】长度控制在18个字符以内，缩写要易于理解，符合通用的习惯

4.2	库命名
【规则】单库仅使用a-z，分库名称为“库名_编号”
【规则】命名规则如下：项目简称+1位数据库类型代码+识别代码+序号
	只有一个数据库，则不加序号，否则末尾增加序号。
	生产库则不加识别代码，否则需要增加识别代码DEV或TEST
	如果只作历史库，则只需要项目简称+H+序号

【说明】数据库代码：
类型代码	识别代码
T	业务型数据库	DEV  	开发数据库
A	分析型数据库	TEST 	测试数据库
H	历史数据库	　	　
【示例】
出入系统业务生产库：AOCT、AOCT1、AOCT2
出入系统业务开发库：AOCTDEV、AOCTDEV1、AOCTDEV2
出入系统业务测试库：AOCTTEST、AOCTTEST1、AOCTTEST2
4.3	表命名
【规则】单表仅使用a-z、_，分表名称为“表名_编号
【规则】业务表名代表用途、内容：子系统简称_业务含义_后缀
【说明】子系统简称一般2~3字符，有开发定制简称；后缀，普通业务表不需要添加后缀。
【规则】常用后缀
类型	后缀
临时表	_tmp、_tmp_yyyymmdd
备份表	_bak、_bak_yyyymmdd
字典表	_dic
历史归档表	_his
日志表	_log
类型表	_type
大字段blob或text	_lob
代码、编码	_code

【规则】常用前缀：子系统简称
	分析型数据库
子系统	简称
数据存储区中的数据表	ods_
事实表	fac_
维表数据	dim_
中间表	mid_

4.4	字段命名
【规则】遵循“见名知意”的原则, 格式:名称_后缀
【规则】布尔型的字段，以助动词(has/is)开头
【规则】常用后缀
类型	后缀	示例
流水号/无意义主键	id	task_id
类别	type	station_type
名称	name	enduser_name
描述	desc	station_desc
代码、编码	code	error_code
标志	flag	debug_flag
时间	time	insert_time

4.5	索引命名
【规则】命名格式：前缀_表名(或缩写)_字段名（或缩写）
【规则】复合索引，取每字段前三个字符加下划线组合
【规则】常用前缀
类型	前缀
主键	pk_
UNIQUE约束	uk_
普通索引	i_
4.6	用户
【规则】与数据库名或业务名称保持一致
5	对象设计规范
5.1	总则
【规则】表使用innodb存储引擎
【规则】库、表、重要字段必须有注释，对于冗余字段要说明其维护方法
【规则】不同表之间的相同字段其属性值要保持一致

5.2	库设计规范
【规则】创建DB和表时显示指定字符集
【规则】对恶魔字符集emoji用utf8mb4(ios常用)
【规则】库表字符集和前端程序、中间件必须保持一致UTF8
【禁止】禁止使用BASE库存放业务数据，BASE库只能存放配置数据

5.3	表设计规范
【规则】必须显示指定engine和charset
【规则】所有业务表必须是innodb表
【规则】表必须有主键
	主键字段名有意义，字段长度要尽量小
	主键列为独立于业务
	不使用复合索引作为主键
	不使用字符串列作为主键
	不使用频繁更新的列作为主键
	不使用UUID、MD5、HASH 作为主键
	主键选择数值型，使用自增或全局ID，并禁止更新
	全局ID的生成规则：前缀+流水号规则。前缀:时间戳等有序数字

【规则】热库表的数量不超过300个
【规则】热表行数纯int不超过2000W，含char不超过1000W
【规则】临时表和备份表定期清理
【规则】需要重复引用大型表或常用表中的某个数据集时，可以使用临时表。
【规则】尽量保持表中行长度较小，表中的所有字段长度总和最长不应超过8K。
【规则】表的水平切分
	用HASH进行水平切分时，表名后缀使用十进制数，下标从000开始
	首次分表尽量多的分，避免二次分表，二次分表的难度和成本较高
	按日期时间分表需符合YYYYMMDDHH格式
	采用合适的分库分表策略，如十库百表
	大表要有明确的数据离线保留策略。
5.4	字段设计规范
【规则】字段的宽度适中
【禁止】禁止在数据库中使用大字段
【规则】单表字段数上限控制在20~50个
【规则】所有字段必须为NOT NULL，NULL列指定default值
【规则】单表不超过50个纯int字段，或不超过20个varchar字段
【规则】保持字段名和数据类型的一致性，例如user_id不要使用varchar
【规则】短数据使用tinyint或smallint
【规则】使用TINYINT来代替ENUM类型
【规则】使用unsigned存储非负数值。
【规则】使用整数保存ip地址和timestamp时间
【规则】对货币等对精度敏感的数据，应该用定点数
【规则】用DECIMAL代替FLOAT和DOUBLE存储精确浮点数
【规则】整形定义中不指定长度，比如使用INT，而不是INT(4)
【规则】变长使用varchar类型
【规则】单个字符的全部使用CHAR类型
【规则】字段中字符长度固定且较小时，使用CHAR()存储，如MD5、身份证号、手机号、性别等。
【规则】仅存储年使用YEAR类型，存储日期使用DATE类型。
【规则】精确到天，使用date类型
【规则】精确到时间（年月日时分秒），使用DATETIME 或TIMESTAMP

5.5	索引设计规范
【禁止】禁止外键
【规则】重要SQL需求的索引优先
【规则】单个表上索引不超过5个
【规则】重复值过高的列，不创建索引

【规则】复合索引
	复合索引中的字段数不超过3个
	核心SQL优先考虑索引覆盖
	复合索引字段的顺序，区分度大的列放在前
	合理创建复合索引，避免冗余或重复索引

【规则】不适合创建索引情况
	更新太频繁的列
	重复值过高的列，例如性别，status, type
	进行数学运算和函数运算的列

【规则】重要的SQL必须被索引
	SELECT、UPDATE、DELETE语句的WHERE条件列
	ORDER BY、GROUP BY、DISTINCT的字段
	多表JOIN的关联字段
6	SQL开发规范
6.1	总则
【规则】使用简单SQL，复杂的SQL可以拆分成多个小的SQL执行
【规则】使用预编译语句，只传递参数
【规则】永远用小结果集驱动大的结果集
【规则】必须查询执行计划，严禁有全表扫描上线
【规则】尽可能在索引中完成排序
【规则】使用最有效的过滤条件
【规则】关键SQL语句，表关联原则上不能超过3个
【规则】SQL语句书写要规范
	SQL语句统一使用小写，每个词只允许有一个空格
	避免同一SQL由于书写格式的不同而导致多次语法分析
【规则】尽量避免向客户端返回大数据量，若数据量过大，应该考虑相应需求是否合理。 
【规则】程序中应有捕获SQL异常的处理机制
【规则】不要将Null与 空串''视为相同。数据库中不允许出现空串。
【规则】使用EXPLAIN判断SQL语句是否合理使用索引，避免extra列出现：Using File Sort，Using Temporary

6.2	DML
【规则】大批量数据dml(update、delete、insert等)操作时，需要分批提交
【禁止】禁止单步commit，分批commit(100-10000)
【规则】insert表时建议写字段名，避免表顺序变动后字段插错顺序
【规则】使用PK键值作为应用中update或delete记录条件
【规则】减少与数据库的交互次数，一次交互完成多次同类型任务
	禁止单条SQL语句同时更新多个表
	Insert … on duplicate key update
	Replace into、insert into values(),(),()…
	Update … where id in (1,2,3,4)
	Alter table tbl_name add column col1, add column col2
6.3	DDL
【禁止】在业务运行期间运行的程序中禁止ddl(create、drop等)操作
【规则】明确事务边界
	应用中事务开始要明确关闭“自动提交”，设置autocommit=0
	应用中显式的提交或回滚事务(commit/rollback)
	事务要简单，整个事务持续时间不要太长
6.4	Select
【禁止】禁止使用select for update语句.
【禁止】SELECT列表中明确指定字段，禁止使用select *
【规则】From列表中，常数表优先，字典表或小表其次，大表最后
【规则】使用in代替or，in的值不超过500个
【规则】使用union all 而不是union
【规则】尽可能避免Join和子查询、or操作
【规则】多表关联所涉及字段必须有索引

6.5	条件	
【禁止】禁止对字段使用函数、运算
【禁止】禁止出现隐式转换，明确字段与变量的类型对应
【规则】条件所涉及字段上尽量有索引
【规则】字段顺序尽量与索引顺序保持一致
【禁止】禁止使用开关条件，如1=1，1=0等
【禁止】禁止使用 not、!=、<>、is null, is not null条件
【规则】多用等值操作；>,<操作转换为>=,<=
【规则】避免使用NULL字段做为条件
	在字段上设置默认值0，确保表中列没有null值
【规则】like子句尽量前置匹配，前置不加%，以便能够利用索引
【规则】充分利用前缀索引,必须是最左前缀
【禁止】禁止无意义order by操作，禁止使用order by rand()
【规则】尽可能减少group by操作
【规则】group by 语句如果得到的result set需要sort ,加上order by
【规则】尽可能使用where条件替代having子句
【规则】使用LIMIT分页时，偏移量不能超过500

