MySQL数据库设计规范

1	编写目的
1.1	简介
针对关系型数据库MySQL的相关特性，拟定的相关开发过程的规范，其旨在通过该规范的约束和建议，使开发人员可以在他们所编写的代码中保持统一正确的风格，提供代码的可读性以及减少出现错误的几率。

1.2	范围
本规范仅适用于MySQL型数据库以及其对应的SQL脚本语言。

1.3	术语和定义
本规范采用以下的术语描述：
★ 禁止：编程时明令禁止使用的原则。
★ 规则：编程时强制遵守的原则。
★ 说明：对此规则进行必要的解释。
★ 示例：对此规则或建议给出样例。
2	数据库策略
2.1	总则
	数据模型全局单一，所有公共的数据模型得到共享。
	数据库建模要基于统一的元数据管理机制。
	数据库设计遵循关系数据库的规范化理论。
	OLTP与OLAP分开设计。
2.2	设计策略
规范数据库设计的主要目的，为了满足当前业务及扩展的需求。主要考虑如下方面：
1)	方便业务功能实现、业务功能扩展；
2)	方便设计开发、增强系统的稳定性和可维护性；
3)	保证数据完整性和准确性；
4)	提高数据存储效率，在满足业务需求的前提下，使时间开销和空间开销达到优化平衡。
2.3	对象长度策略
数据库字段的长度要考虑业务对象的类型、数据库所用字符集、时间格式来设定出相对准确的长度，满足业务需要，同时保证数据库的高效，避免不必要的开销。
2.4	数据完整性策略
必须遵循数据库设计的第二范式，根据业务需要尽量满足第三范式。
数据完整性尽量通过业务逻辑实现，数据库设计应禁止使用大量的外键约束，禁止使用触发器、存储过程、自定义函数、视图、事件等。
2.5	设计与性能的权衡策略
数据的标准化有助于消除数据库中的数据冗余。如果数据冗余低，数据的一致性容易得到保证，如无特殊理由，OLTP系统的设计应当遵循第三范式，对于OLAP系统，为了减少表间连接查询的操作，提高系统的响应时间，合理的数据冗余是必要的。

3	基本规范
数据库的主要目的是存储，为了达到高效使用，必须禁止部分功能和规范对象使用。
3.1	功能
【禁止】禁用外键
【禁止】禁用视图
【禁止】禁用触发器
【禁止】禁用存储过程
【禁止】禁用自定义函数
【禁止】禁用EVENTS
【禁止】禁用分区表
【禁止】禁用保留字命名
【禁止】禁用ENUM、SET类型
【禁止】禁用TEXT/BLOB类型
【禁止】SQL中禁用HINT信息
3.2	对象使用
【禁止】禁用“-”中划线
【禁止】禁用select *
【禁止】禁用频繁短连接
【禁止】禁用数据库层运算
【禁止】禁止滥用外连接 
【禁止】禁止超过三个表的关联
【禁止】禁用大事务、大SQL、大批量
【禁止】禁用无条件或永真条件的DELETE和UPDATE语句

3.3	设计规范
【禁止】禁止在线上做数据库压力测试
【禁止】禁止从测试、开发环境直连线上数据库
【禁止】禁止在数据库中存储图片、文件等大对象
【禁止】禁止在数据库中存储明文密码，加密后存入数据库

